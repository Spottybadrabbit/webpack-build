{"version":3,"sources":["../../src/hmr/config.js"],"names":[],"mappings":";;;;;;;;oBAAiB,MAAM;;;;sBACT,QAAQ;;;;uBACF,SAAS;;;;AAE7B,IAAM,SAAS,GAAG,SAAZ,SAAS,CAAI,MAAM,EAAE,IAAI,EAAK;AAClC,MAAI,CAAC,IAAI,CAAC,OAAO,EAAE;AACjB,UAAM,IAAI,KAAK,CAAC,+CAA+C,CAAC,CAAC;GAClE;;AAED,MAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AACpB,UAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;GACrE;;AAED,MAAI,CAAC,IAAI,CAAC,UAAU,EAAE;AACpB,UAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;GACrE;;AAED,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;AAChC,QAAI,EAAE,IAAI,CAAC,OAAO;AAClB,QAAI,EAAE,IAAI,CAAC,OAAO;AAClB,aAAS,EAAE,IAAI,CAAC,YAAY;GAC7B,CAAC,CAAC;;AAEH,MAAM,SAAS,GAAG,mCACgB,UAAU;;AAE1C,+BAA6B,CAC9B,CAAC;;AAEF,QAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;;AAElC,MAAI,oBAAE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;AAC3B,UAAM,CAAC,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;GAC/C,MAAM,IAAI,oBAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;AACnC,wBAAE,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAS,KAAK,EAAE,GAAG,EAAE;AACnD,YAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;KAC7C,CAAC,CAAC;GACJ,MAAM;AACL,UAAM,CAAC,KAAK,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;GACjD;;AAED,QAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC;;AAEtC,QAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,qBAAQ,0BAA0B,EAAE,CAAC,CAAC;;AAE9D,QAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;;AAEpC,QAAM,CAAC,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;;AAE3C,QAAM,CAAC,WAAW,GAAG,kBAAK,IAAI,CAAC,IAAI,CAAC,UAAU,uBAAqB,IAAI,CAAC,IAAI,WAAQ,CAAC;CACtF,CAAC;;qBAEa,SAAS","file":"config.js","sourcesContent":["import path from 'path';\nimport _ from 'lodash';\nimport webpack from 'webpack';\n\nconst hmrConfig = (config, opts) => {\n  if (!opts.hmrRoot) {\n    throw new Error('hmrRoot must be defined to inject hmr runtime');\n  }\n\n  if (!opts.outputPath) {\n    throw new Error('outputPath must be defined to inject hmr runtime');\n  }\n\n  if (!opts.publicPath) {\n    throw new Error('publicPath must be defined to inject hmr runtime');\n  }\n\n  const socketOpts = JSON.stringify({\n    root: opts.hmrRoot,\n    path: opts.hmrPath,\n    namespace: opts.hmrNamespace\n  });\n\n  const devClient = [\n    `webpack-build/lib/hmr/client?${socketOpts}`,\n    // TODO: replace?\n    'webpack/hot/only-dev-server'\n  ];\n\n  config.entry = config.entry || [];\n\n  if (_.isArray(config.entry)) {\n    config.entry = devClient.concat(config.entry);\n  } else if (_.isObject(config.entry)) {\n    _.forEach(config.entry).forEach(function(value, key) {\n      config.entry[key] = devClient.concat(value);\n    });\n  } else {\n    config.entry = devClient.concat([config.entry]);\n  }\n\n  config.plugins = config.plugins || [];\n\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\n\n  config.output = config.output || {};\n\n  config.output.publicPath = opts.publicPath;\n\n  config.recordsPath = path.join(opts.outputPath, `webpack.records-${opts.hash}.json`);\n};\n\nexport default hmrConfig;"]}