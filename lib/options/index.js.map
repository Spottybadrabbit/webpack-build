{"version":3,"sources":["../../src/options/index.js"],"names":[],"mappings":";;;;;;;;sBAAmB,QAAQ;;;;oBACV,MAAM;;;;sBACT,QAAQ;;;;uBACE,eAAe;;;;wBAClB,YAAY;;;;qBAElB,UAAC,IAAI,EAAK;AACvB,MAAI,GAAG,IAAI,IAAI,EAAE,CAAC;;AAElB,MAAI,GAAG,oBAAE,QAAQ,CAAC,IAAI,wBAAW,CAAC;;AAElC,MAAI,IAAI,CAAC,SAAS,IAAI,CAAC,oBAAE,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,EAAE;AACtD,QAAI,CAAC,SAAS,IAAI,GAAG,CAAC;GACvB;;AAED,MAAI,IAAI,CAAC,UAAU,IAAI,CAAC,oBAAE,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,CAAC,EAAE;AACxD,QAAI,CAAC,UAAU,IAAI,GAAG,CAAC;GACxB;;AAED,MAAI,CAAC,IAAI,CAAC,IAAI,EAAE;AACd,QAAI,YAAY,GAAG,oBAAE,IAAI,CAAC,IAAI,EAAE,oBAAE,QAAQ,CAAC,CAAC;AAC5C,QAAI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AACxC,QAAI,OAAO,GAAG,IAAI,GAAG,qBAAY,OAAO,CAAC;AACzC,QAAI,CAAC,IAAI,GAAG,oBAAO,UAAU,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;GACpE;;AAED,MAAI,CAAC,IAAI,CAAC,SAAS,EAAE;AACnB,QAAI,CAAC,SAAS,GAAG,kBAAK,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,CAAC;GAChE;;AAED,MAAI,IAAI,CAAC,OAAO,IAAI,oBAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,CAAC,EAAE;AACjD,QAAI,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;GAC1C;;AAED,MAAI,CAAC,IAAI,CAAC,YAAY,EAAE;AACtB,QAAI,CAAC,YAAY,SAAO,IAAI,CAAC,IAAI,AAAE,CAAC;GACrC;;AAED,SAAO,IAAI,CAAC;CACb","file":"index.js","sourcesContent":["import crypto from 'crypto';\nimport path from 'path';\nimport _ from 'lodash';\nimport packageJson from '../../package';\nimport defaults from './defaults';\n\nexport default (opts) => {\n  opts = opts || {};\n\n  opts = _.defaults(opts, defaults);\n\n  if (opts.staticUrl && !_.endsWith(opts.staticUrl, '/')) {\n    opts.staticUrl += '/';\n  }\n\n  if (opts.publicPath && !_.endsWith(opts.publicPath, '/')) {\n    opts.publicPath += '/';\n  }\n\n  if (!opts.hash) {\n    let serializable = _.omit(opts, _.isObject);\n    let json = JSON.stringify(serializable);\n    let content = json + packageJson.version;\n    opts.hash = crypto.createHash('md5').update(content).digest('hex');\n  }\n\n  if (!opts.cacheFile) {\n    opts.cacheFile = path.join(opts.cacheDir, opts.hash + '.json');\n  }\n\n  if (opts.hmrRoot && _.endsWith(opts.hmrRoot, '/')) {\n    opts.hmrRoot = opts.hmrRoot.slice(0, -1);\n  }\n\n  if (!opts.hmrNamespace) {\n    opts.hmrNamespace = `/${opts.hash}`;\n  }\n\n  return opts;\n};"]}