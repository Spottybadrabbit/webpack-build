{"version":3,"sources":["../src/build.js"],"names":[],"mappings":";;;;;;;;kBAAe,IAAI;;;;uBACC,WAAW;;;;mBACf,OAAO;;;;wBACF,YAAY;;;;qBACf,SAAS;;;;AAE3B,IAAI,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;AAEzC,IAAI,eAAe,GAAG,SAAlB,eAAe,CAAI,UAAU,EAAE,EAAE,EAAK;;;;AAIxC,MAAI,CAAC,UAAU,EAAE,OAAO,IAAI,CAAC;;AAE7B,MAAI,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE;AAC/B,QAAI;AACF,aAAO,CAAC,UAAU,CAAC,CAAC;KACrB,CAAC,OAAM,GAAG,EAAE;AACX,QAAE,CAAC,GAAG,CAAC,CAAC;AACR,aAAO,KAAK,CAAC;KACd;;AAED,QAAI;AACF,oBAAc,CAAC,UAAU,CAAC,GAAG,CAAC,gBAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;KAC7D,CAAC,OAAM,GAAG,EAAE;AACX,QAAE,CAAC,GAAG,CAAC,CAAC;AACR,aAAO,KAAK,CAAC;KACd;GACF,MAAM;AACL,QAAI,SAAS,YAAA,CAAC;AACd,QAAI;AACF,eAAS,GAAG,CAAC,gBAAG,QAAQ,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC;KAC5C,CAAC,OAAM,GAAG,EAAE;AACX,QAAE,CAAC,GAAG,CAAC,CAAC;AACR,aAAO,KAAK,CAAC;KACd;;AAED,QAAI,SAAS,GAAG,cAAc,CAAC,UAAU,CAAC,EAAE;AAC1C,QAAE,CAAC,IAAI,KAAK,CAAC,6EAA6E,CAAC,CAAC,CAAC;AAC7F,aAAO,KAAK,CAAC;KACd;GACF;;AAED,SAAO,IAAI,CAAC;CACb,CAAC;;AAEF,IAAM,KAAK,GAAG,SAAR,KAAK,CAAI,IAAI,EAAE,EAAE,EAAK;AAC1B,MAAI,GAAG,0BAAQ,IAAI,CAAC,CAAC;;;AAGrB,MAAI,CAAC,eAAe,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE;AACrC,WAAO;GACR;;AAED,MAAI,MAAM,GAAG,sBAAI,OAAO,EAAE,IAAI,CAAC,CAAC;AAChC,QAAM,+BAA6B,IAAI,CAAC,MAAM,CAAG,CAAC;;AAElD,MAAI,OAAO,GAAG,sBAAS,GAAG,CAAC,IAAI,CAAC,CAAC;;;;;AAKjC,SAAO,CAAC,QAAQ,CAAC,YAAM;AACrB,UAAM,CAAC,4BAA4B,CAAC,CAAC;AACrC,uBAAM,GAAG,CAAC,IAAI,EAAE,UAAS,GAAG,EAAE,IAAI,EAAE;AAClC,UAAI,GAAG,EAAE;AACP,cAAM,CAAC,yBAAyB,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;OAChD;;AAED,UAAI,CAAC,IAAI,EAAE;AACT,cAAM,CAAC,+CAA+C,CAAC,CAAC;AACxD,eAAO,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;OAC7B;;AAED,UAAI,IAAI,CAAC,KAAK,EAAE;AACd,cAAM,CAAC,8BAA8B,CAAC,CAAC;AACvC,eAAO,CAAC,QAAQ,CAAC,YAAM,EAAc,CAAC,CAAC;OACxC;;AAED,YAAM,CAAC,uBAAuB,CAAC,CAAC;AAChC,aAAO,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACvB,CAAC,CAAC;GACJ,CAAC,CAAC;;AAEH,SAAO,OAAO,CAAC;CAChB,CAAC;;qBAEa,KAAK","file":"build.js","sourcesContent":["import fs from 'fs';\nimport options from './options';\nimport log from './log';\nimport wrappers from './wrappers';\nimport cache from './cache';\n\nlet fileTimestamps = Object.create(null);\n\nlet checkConfigfile = (configFile, cb) => {\n  // Synchronous check to ensure that config files have\n  // not changed since they were loaded\n\n  if (!configFile) return true;\n\n  if (!fileTimestamps[configFile]) {\n    try {\n      require(configFile);\n    } catch(err) {\n      cb(err);\n      return false;\n    }\n\n    try {\n      fileTimestamps[configFile] = +fs.statSync(configFile).mtime;\n    } catch(err) {\n      cb(err);\n      return false;\n    }\n  } else {\n    let timestamp;\n    try {\n      timestamp = +fs.statSync(configFile).mtime;\n    } catch(err) {\n      cb(err);\n      return false;\n    }\n\n    if (timestamp > fileTimestamps[configFile]) {\n      cb(new Error('Config file has changed since being loaded into memory. Restart the process'));\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst build = (opts, cb) => {\n  opts = options(opts);\n\n  // Ensure that our version of the config file is fresh\n  if (!checkConfigfile(opts.config, cb)) {\n    return;\n  }\n\n  let logger = log('build', opts);\n  logger(`build request lodged for ${opts.config}`);\n\n  let wrapper = wrappers.get(opts);\n\n  // Defer so that we can return the wrapper before `cb` is called\n  // This adds a tiny overhead, but makes testing much easier to\n  // reason about\n  process.nextTick(() => {\n    logger('requesting data from cache');\n    cache.get(opts, function(err, data) {\n      if (err) {\n        logger('cache produced an error', err.message);\n      }\n\n      if (!data) {\n        logger('cache failed to provide data, calling wrapper');\n        return wrapper.onceDone(cb);\n      }\n\n      if (opts.watch) {\n        logger('Ensuring watcher has started');\n        wrapper.onceDone(() => { /* no-op */});\n      }\n\n      logger('serving cached output');\n      return cb(null, data);\n    });\n  });\n\n  return wrapper;\n};\n\nexport default build;"]}