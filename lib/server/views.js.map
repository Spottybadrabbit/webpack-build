{"version":3,"sources":["../../src/server/views.js"],"names":[],"mappings":";;;;;;;;sBAAc,QAAQ;;;;qBACJ,UAAU;;;;+BACP,qBAAqB;;;;2BACvB,iBAAiB;;;;wBACf,aAAa;;;;uBACd,YAAY;;;;mBAChB,QAAQ;;;;uBACA,eAAe;;;;AAEhC,IAAM,KAAK,GAAG,SAAR,KAAK,CAAI,GAAG,EAAE,GAAG,EAAK;AACjC,MAAI,KAAK,8BAA4B,qBAAY,OAAO,AAAE,CAAC;;AAE3D,MAAI,WAAW,GAAG,oBAAE,GAAG,CAAC,sBAAS,QAAQ,EAAE,UAAC,OAAO,EAAE,GAAG,EAAK;AAC3D,oBAAc,GAAG,iBAAY,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,WAAQ;GAC3E,CAAC,CAAC;AACH,MAAI,SAAS,GAAG,oBAAE,GAAG,CAAC,yBAAO,MAAM,EAAE,UAAC,KAAK,EAAE,GAAG,EAAK;AACnD,kCAEI,GAAG,iBAAY,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,uBAE/C;GACH,CAAC,CAAC;AACH,KAAG,CAAC,GAAG,uCAGI,KAAK,+CAGR,KAAK,sDAEJ,IAAI,CAAC,SAAS,+BAAW,IAAI,EAAE,CAAC,CAAC,+CAElC,WAAW,4CAEX,SAAS,qCAGf,CAAC;CACJ,CAAC;;QA7BW,KAAK,GAAL,KAAK;AA+BX,IAAM,YAAY,GAAG,SAAf,YAAY,CAAI,GAAG,EAAE,GAAG,EAAK;AACxC,MAAI,IAAI,GAAG,0BAAQ,GAAG,CAAC,IAAI,CAAC,CAAC;AAC7B,0BAAM,IAAI,EAAE,UAAC,GAAG,EAAE,IAAI,EAAK;AACzB,QAAI,GAAG,EAAE;AACP,4BAAI,cAAc,EAAE,IAAI,CAAC,CAAC,iCAAiC,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;KACzE;;AAED,QAAI,KAAK,GAAG,IAAI,CAAC;AACjB,QAAI,GAAG,EAAE;AACP,WAAK,GAAG;AACN,YAAI,EAAE,GAAG,CAAC,WAAW,CAAC,IAAI;AAC1B,eAAO,EAAE,GAAG,CAAC,OAAO;AACpB,aAAK,EAAE,GAAG,CAAC,KAAK;OACjB,CAAA;KACF;;AAED,OAAG,CAAC,IAAI,CAAC;AACP,WAAK,EAAE,KAAK;AACZ,UAAI,EAAE,IAAI,IAAI,IAAI;KACnB,CAAC,CAAC;GACJ,CAAC,CAAA;CACH,CAAC;QArBW,YAAY,GAAZ,YAAY","file":"views.js","sourcesContent":["import _ from 'lodash';\nimport build from '../build';\nimport defaults from '../options/defaults';\nimport caches from '../cache/caches';\nimport wrappers from '../wrappers';\nimport options from '../options';\nimport log from '../log';\nimport packageJson from '../../package';\n\nexport const index = (req, res) => {\n  let title = `webpack-build-server v${packageJson.version}`;\n\n  let wrapperList = _.map(wrappers.wrappers, (wrapper, key) => {\n    return `<li>${key} &mdash; ${JSON.stringify(wrapper.opts, null, 2)}</li>`;\n  });\n  let cacheList = _.map(caches.caches, (cache, key) => {\n    return `\n    <li>\n      ${key} &mdash; ${JSON.stringify(cache, null, 2)}\n    </li>\n    `;\n  });\n  res.end(`\n  <html>\n  <head>\n    <title>${title}</title>\n  </head>\n  <body>\n    <h1>${title}</h1>\n    <h2>Default options</h2>\n    <pre>${JSON.stringify(defaults, null, 2)}</pre>\n    <h2>Wrappers</h2>\n    <ul>${wrapperList}</ul>\n    <h2>Caches</h2>\n    <ul>${cacheList}</ul>\n  </body>\n  </html>\n  `);\n};\n\nexport const buildRequest = (req, res) => {\n  let opts = options(req.body);\n  build(opts, (err, data) => {\n    if (err) {\n      log('build-server', opts)('build request produced an error', err.stack);\n    }\n\n    let error = null;\n    if (err) {\n      error = {\n        type: err.constructor.name,\n        message: err.message,\n        stack: err.stack\n      }\n    }\n\n    res.json({\n      error: error,\n      data: data || null\n    });\n  })\n};\n"]}